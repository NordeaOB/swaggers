{
    "swagger": "2.0",
    "info": {
        "description": "Nordea Authorization API v5",
        "version": "5.0",
        "title": "Authorization API",
        "contact": {
            "name": "Open Banking team",
            "url": "https://nordeaopenbanking.com",
            "email": "support@nordeaopenbanking.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "x-ibm-name": "auth-v5",
        "x-version": "5.0"
    },
    "host": "localhost:8079",
    "basePath": "/",
    "tags": [
        {
            "name": "Authorization",
            "description": "Redirect Access Authorization"
        }
    ],
    "schemes": [
        "http"
    ],
    "paths": {
        "/v5/authorize": {
            "post": {
                "tags": [
                    "Authorization"
                ],
                "summary": "Redirect Access Authorization",
                "operationId": "authorization-v5-se-fi-dk-no",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "Digest",
                        "in": "header",
                        "description": "The Digest Header header as defined in [RFC3230] contains a Hash of the message body. The only hash algorithms that may be used to calculate the Digest within the context of this specification are SHA-256 and SHA-512 as defined in [RFC5843]. For POST with 'application/x-www-form-urlencoded' content type Digest should be calculated for normalized string created from request parameters like this: 'param1&#61;value1&#38;param2&#61;value2'. It is important that parameters should be placed in alphabetic order",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Signature",
                        "in": "header",
                        "description": "A signature of request by the TPP on application level. The process of signing a request is described in 'Signing HTTP Messages' RFC draft version 10 (<a href=\"https://tools.ietf.org/html/draft-cavage-http-signatures-10\" target=\"_blank\">https://tools.ietf.org/html/draft-cavage-http-signatures-10</a>). The request signature needs to be sent in the 'Signature' HTTP header as described in the RFC. Additional requirements from Nordea \n - The only allowed algorithm is RSA-SHA256 \n- The key size for the used RSA key pair has to be at least 2048 bit \n- The keyId is the clientId of your application originating from the Nordea Developer Portal \n- We require the following headers to be used in the signature \n* Request without body: (request-target) X-Nordea-Originating-Host X-Nordea-Originating-Date \n* Request with body: (request-target) X-Nordea-Originating-Host X-Nordea-Originating-Date Content-type Digest \n* The request-target is a combination of the HTTP action verb and the request URI path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-IBM-Client-Id",
                        "in": "header",
                        "description": "Id of the Client",
                        "required": true,
                        "type": "string",
                        "x-availabilityStatus": "Stable"
                    },
                    {
                        "name": "X-IBM-Client-Secret",
                        "in": "header",
                        "description": "Secret password generated for the Client",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Nordea-Originating-Date",
                        "in": "header",
                        "description": "HTTP header element for date and time represented as RFC 7231 Full Dates (GMT). Example date: **Wed, 24 Apr 2019 14:00:37 GMT**. It is similar to standard HTTP 'Date' expect that it allows to set it under JavaScript in browser while standard 'Date' is forbidden",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Nordea-Originating-Host",
                        "in": "header",
                        "description": "HTTP header element for specification of the domain name of the server. It is similar to standard HTTP 'Host' header but it won't be overridden by proxies. It also allows to set it under JavaScript in browser while standard 'Host' is forbidden",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Nordea-Originating-User-Agent",
                        "in": "header",
                        "description": "End user (i.e. PSU) agent information, to be provided if TPP is in session with the PSU",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Nordea-Originating-User-Ip",
                        "in": "header",
                        "description": "End user (i.e. PSU) IP address, to be provided if TPP is in session with the PSU",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "request",
                        "description": "Request for authorization",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthRequest"
                        },
                        "x-availabilityStatus": "Stable"
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirect to OAuth provider"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized with failure code:\n* error.apikey.missing = Missing API key. This operation requires API key, but it was missing.\n* error.token = Unspecified error with supplied token.\n* error.token.invalid = Missing access token or token did not authorized requested operation. This operation requires valid access token, but it was missing.\n* error.token.expired = Access token has expired.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden with failure code:\n* error.resource.denied = Requested resource is not authorized by access token.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "ACCOUNTS_BASIC",
                            "ACCOUNTS_BALANCES",
                            "ACCOUNTS_DETAILS",
                            "ACCOUNTS_TRANSACTIONS",
                            "PAYMENTS_MULTIPLE"
                        ],
                        "DecoupledAuth": [
                            "ACCOUNTS_BASIC",
                            "ACCOUNTS_BALANCES",
                            "ACCOUNTS_DETAILS",
                            "ACCOUNTS_TRANSACTIONS",
                            "PAYMENTS_MULTIPLE"
                        ]
                    }
                ],
                "deprecated": false,
                "x-availabilityStatus": "Stable"
            }
        },
        "/v5/authorize/token": {
            "post": {
                "tags": [
                    "Authorization"
                ],
                "summary": "Redirect - Token Exchange",
                "operationId": "accessTokenUsingPOST_1",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "Digest",
                        "in": "header",
                        "description": "The Digest Header header as defined in [RFC3230] contains a Hash of the message body. The only hash algorithms that may be used to calculate the Digest within the context of this specification are SHA-256 and SHA-512 as defined in [RFC5843]. For POST with 'application/x-www-form-urlencoded' content type Digest should be calculated for normalized string created from request parameters like this: 'param1&#61;value1&#38;param2&#61;value2'. It is important that parameters should be placed in alphabetic order",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "Signature",
                        "in": "header",
                        "description": "A signature of request by the TPP on application level. The process of signing a request is described in 'Signing HTTP Messages' RFC draft version 10 (<a href=\"https://tools.ietf.org/html/draft-cavage-http-signatures-10\" target=\"_blank\">https://tools.ietf.org/html/draft-cavage-http-signatures-10</a>). The request signature needs to be sent in the 'Signature' HTTP header as described in the RFC. Additional requirements from Nordea \n - The only allowed algorithm is RSA-SHA256 \n- The key size for the used RSA key pair has to be at least 2048 bit \n- The keyId is the clientId of your application originating from the Nordea Developer Portal \n- We require the following headers to be used in the signature \n* Request without body: (request-target) X-Nordea-Originating-Host X-Nordea-Originating-Date \n* Request with body: (request-target) X-Nordea-Originating-Host X-Nordea-Originating-Date Content-type Digest \n* The request-target is a combination of the HTTP action verb and the request URI path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-IBM-Client-Id",
                        "in": "header",
                        "description": "Id of the Client",
                        "required": true,
                        "type": "string",
                        "x-availabilityStatus": "Stable"
                    },
                    {
                        "name": "X-IBM-Client-Secret",
                        "in": "header",
                        "description": "Secret password generated for the Client",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Nordea-Originating-Date",
                        "in": "header",
                        "description": "HTTP header element for date and time represented as RFC 7231 Full Dates (GMT). Example date: **Wed, 24 Apr 2019 14:00:37 GMT**. It is similar to standard HTTP 'Date' expect that it allows to set it under JavaScript in browser while standard 'Date' is forbidden",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Nordea-Originating-Host",
                        "in": "header",
                        "description": "HTTP header element for specification of the domain name of the server. It is similar to standard HTTP 'Host' header but it won't be overridden by proxies. It also allows to set it under JavaScript in browser while standard 'Host' is forbidden",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Nordea-Originating-User-Agent",
                        "in": "header",
                        "description": "End user (i.e. PSU) agent information, to be provided if TPP is in session with the PSU",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Nordea-Originating-User-Ip",
                        "in": "header",
                        "description": "End user (i.e. PSU) IP address, to be provided if TPP is in session with the PSU",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "code",
                        "in": "formData",
                        "description": "The OAuth2 auth code. Required if grant_type=authorization_code",
                        "required": false,
                        "type": "string",
                        "x-availabilityStatus": "Stable"
                    },
                    {
                        "name": "grant_type",
                        "in": "formData",
                        "description": "The grant type of request",
                        "required": true,
                        "type": "string",
                        "x-example": "authorization_code",
                        "enum": [
                            "authorization_code",
                            "refresh_token"
                        ],
                        "x-availabilityStatus": "Stable"
                    },
                    {
                        "name": "redirect_uri",
                        "in": "formData",
                        "description": "Redirect URI you used when this application was registered with Nordea. Required if grant_type=authorization_code",
                        "required": false,
                        "type": "string",
                        "x-availabilityStatus": "Stable"
                    },
                    {
                        "name": "refresh_token",
                        "in": "formData",
                        "description": "The OAuth2 refresh token. Required if grant_type=refresh_token",
                        "required": false,
                        "type": "string",
                        "x-availabilityStatus": "Stable"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BearerToken"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized with failure code:\n* error.apikey.missing = Missing API key. This operation requires API key, but it was missing.\n* error.token = Unspecified error with supplied token.\n* error.token.invalid = Missing access token or token did not authorized requested operation. This operation requires valid access token, but it was missing.\n* error.token.expired = Access token has expired.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden with failure code:\n* error.resource.denied = Requested resource is not authorized by access token.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                },
                "security": [
                    {
                        "OAuth2": [
                            "ACCOUNTS_BASIC",
                            "ACCOUNTS_BALANCES",
                            "ACCOUNTS_DETAILS",
                            "ACCOUNTS_TRANSACTIONS",
                            "PAYMENTS_MULTIPLE"
                        ],
                        "DecoupledAuth": [
                            "ACCOUNTS_BASIC",
                            "ACCOUNTS_BALANCES",
                            "ACCOUNTS_DETAILS",
                            "ACCOUNTS_TRANSACTIONS",
                            "PAYMENTS_MULTIPLE"
                        ]
                    }
                ],
                "deprecated": false,
                "x-availabilityStatus": "Stable"
            }
        }
    },
    "definitions": {
        "AuthRequest": {
            "type": "object",
            "required": [
                "country",
                "duration",
                "redirect_uri",
                "scope",
                "state"
            ],
            "properties": {
                "account_list": {
                    "type": "array",
                    "example": [
                        41351300039,
                        1234567890
                    ],
                    "description": "Optional list of payment accounts for which the PSU has agreed access with the TPP.\nIf not provided, PSU will select payment account(s) in the Nordea UI.\nSpecial case: passing ‘ALL’ results in the PSU agreeing access to all of their Nordea payment accounts.\nIf skip_account_selection is set to True, Then account_list must be provided.",
                    "items": {
                        "type": "string"
                    },
                    "x-availabilityStatus": "Stable"
                },
                "authentication_method": {
                    "type": "string",
                    "example": "BANKID_SE",
                    "description": "Parameter with possible values: NEMID_2F (DK only: NemID with username, password and OTC/NMAS), BANKID_NO (NO only: BankID Norway), BANKIDM_NO (NO only: Mobile BankID Norway), MTA_NO (NO only: CodeAppNO - Online), BANKID_SE (SE only: BankIdSe), CARD_RDR (SE only: Card Reader e-code), MTA (FI only: CodeAppFI - Online), MTA_OFF (FI only: CodeAppFI - Offline), CCALC (FI only: Code Calculator), QR_RDR (SE only: QR reader)",
                    "enum": [
                        "NEMID_2F",
                        "BANKID_NO",
                        "BANKIDM_NO",
                        "BANKID_SE",
                        "CARD_RDR",
                        "MTA",
                        "MTA_OFF",
                        "CCALC",
                        "QR_RDR"
                    ],
                    "x-availabilityStatus": "Stable"
                },
                "country": {
                    "type": "string",
                    "example": "SE",
                    "description": "Country is a mandatory parameter with possible values FI, DK, NO or SE",
                    "enum": [
                        "FI",
                        "DK",
                        "NO",
                        "SE"
                    ],
                    "x-availabilityStatus": "Stable"
                },
                "duration": {
                    "type": "integer",
                    "format": "int32",
                    "example": 3600,
                    "description": "Duration of access authorization in minutes. range: 1 to 129600 minutes (90 days)",
                    "x-availabilityStatus": "Stable"
                },
                "language": {
                    "type": "string",
                    "example": "en",
                    "description": "Language of message that will be displayed to client of bankId mobile app, ISO639-1 and 639-2",
                    "enum": [
                        "fi",
                        "da",
                        "sv",
                        "en",
                        "no"
                    ],
                    "x-availabilityStatus": "Stable"
                },
                "max_tx_history": {
                    "type": "integer",
                    "format": "int32",
                    "example": 10,
                    "description": "Maximum transaction history in months. Optional if ACCOUNTS_TRANSACTIONS scope is requested. Default=2 months. range: 1 to 12 months",
                    "x-availabilityStatus": "Stable"
                },
                "redirect_uri": {
                    "type": "string",
                    "example": "https://example.com",
                    "description": "Redirect URI you used when this application was registered with Nordea.",
                    "x-availabilityStatus": "Stable"
                },
                "scope": {
                    "type": "array",
                    "example": ["ACCOUNTS_BASIC","ACCOUNTS_BALANCES"],
                    "description": "Scope list. Note: ACCOUNTS_BASIC must be present at a minimum, when requesting ACCOUNTS_* scopes",
                    "items": {
                        "type": "string",
                        "enum": [
                            "ACCOUNTS_BASIC",
                            "ACCOUNTS_BALANCES",
                            "ACCOUNTS_DETAILS",
                            "ACCOUNTS_TRANSACTIONS",
                            "PAYMENTS_MULTIPLE",
                            "CARDS_INFORMATION",
                            "CARDS_TRANSACTIONS"
                        ]
                    },
                    "x-availabilityStatus": "Stable"
                },
                "skip_account_selection": {
                    "type": "boolean",
                    "example": true,
                    "description": "If set to true, enables skipping of account selection step provided by Nordea.\nIf set to true, then cards data cannot be accessed.\nIf not set, value defaults to false and account selection step is provided to the PSU.",
                    "x-availabilityStatus": "Stable"
                },
                "state": {
                    "type": "string",
                    "example": "anyString",
                    "description": "The OAuth2 state parameter",
                    "x-availabilityStatus": "Stable"
                }
            },
            "title": "AuthRequest",
            "description": "Request for authorization"
        },
        "BearerToken": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJjdHkiOiJKV1QiLCJlbmMiOiJBMTI4R0NNIiwiYWxnIjoiZGlyIn0..EM2YgJGre7OTIpmA.8GmpStB05uh4u_1wrEpyVCV_P5XwTcbL7zF_NsZJaMcZvo3B78gqhDR2lCCGLbTTImM4ILGHEQXO5Q7-obmdacIk9jcRr2eg5lTj_MBk9ch9yCMGh1NLEtXfOuHO1WzLoR6njQLDHdvvA2M3MEnVToqF6NdRI5f1hpWwC75TwUJWG50YTTYUBJskGPuRMLPfuTH-sncyVpI5Pj-XwXgcwOuXq8mz87DE1ZCCxPollReFZFsriQO3FeAqdgKigLaDH_WsoromxG2RAz6u4de-IYwXeWhsyq81SvOICE29kLMl9uxCvp6frYzOHoe7rfSaJiPhWGLn4_l29GimVNepQi1BadFqvHUyr7pUtO4Nx8e3piN7RV4DpMu1mf8_BYJaNUMyaeismu7RS9CmXm8wiEwgxK6f6vSOZxK6X8k7EHNKmZJZyR0q5ZRtFMzNa27tFah5_CybeJ86dJYIoaS1yG4rwBhokM06lVwAUAnpjXSRdoD7VUeNeg70DvTS2rtLa_w0_RLpva-iGkup-GIQyURK_jDZF2dVlRIanA8cwF6PZTA4cVslCd6EScJx9AHG87MmiWs6j0KOLZRyun3N3BEeRrjjcPk_lc3zcd8E2MZB4l-4o69cYvgAk1DpkxB__3IyuVkTEGwxlvT04anjsGLXEiunvQnDlAyEApr4xBeIGA2tAU8sstOQgGQffRj17iXWFgh4n5uHP77wrA4_d1tydAGCBhEVk6tsUVA81cavlwEfF53Yn1SK9bVofKv412tzU8fzNecni0IAsuWsCLGX.z3MMhpzmMp-GwdbTSl2rWQ",
                    "description": "Access token",
                    "x-availabilityStatus": "Stable"
                },
                "expires_in": {
                    "type": "integer",
                    "format": "int64",
                    "example": 3600,
                    "description": "Token expiration time",
                    "x-availabilityStatus": "Stable"
                },
                "token_type": {
                    "type": "string",
                    "example": "Bearer",
                    "description": "Token type",
                    "x-availabilityStatus": "Stable"
                },
                "refresh_token": {
                    "type": "string",
                    "example": "eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiZGlyIn0..9IxfdEexBagh8deitsB4_pSVMs-y7OZ73k07MKTUufBOCUWpuBx3cRyPaGfMvwehEhefL2Ffi_FYhBb-StxF_m59aA2kqJimtSX0mr3Ogd5bLWNc2fXSEHPoKEJyzIVi-V-wjv6hBspUAk008Fq26tzvhjrBoswqUdqfmbksXED02fjMYYYP9Fcn7Jg3JO_AjEswxgqmWGsfhHIdNXrPPGpIfk7R0G0sehignbOjDraxCfYsYmp_6zxh5Ja2QDvsRlhAqdSRgX_I7kEpZFZbtJk-19mYMK7eOidTkLMPuhhg_7UcJSo5PjuFMhgvNJKx8UWiyRFlLAWCdo6CknQgJDGCGTiNCUoHywlZBYVmsPJlQITIOHgjvhQQa6Bk3xVs_r4gVfJiKqI4y96l6Tw9ydHJQrLw-4eJBdjisPpUZlrGgvP_WUYigVzco95kSQcT1WqBHhCMdGchPm0mEPD4BSpzHOvlIqmXaiGSwLC4YxQn_PfWWGGnbPvcfg8GJoX4iR6nv_Excn32mpUWlbl7lo-YD2c45oJVJVqFrADRqtQN-lR84cXmd75Gr7R7IJxgZnH8C6EfrBAiy_QEScsIOoDFESqAvUPCXj8FH9_cdWkeLsLSEkJwLOeLcTF73iXG7h_L_giz3t6zjNRa2WxErOxdYF0G453xQb4nFH1X9gc2jnSInmt1jiZGL3WSSXcCWjTSwQq3WhgVfjVTszMF_3F5NnSPHKuKpYf1Dc1kG_F0egzg2HIwTESZOr1jsmMjfyW42jotjc8JhbnjTU-dOgopCf5jWjzTeXFgdxgow7Am3NQa8R3wudqTQD7q5-ItMhW5mVt8TKk7IFjxd2r5tTJFiIsi8nyXOEujs4GuWtmL8gfqrulA7MgodN-FFXPGpa4KbLCGgO7dr5qY-eYLcg._OZAqZevjU4wIAe7D8aQfw",
                    "description": "Refresh token",
                    "x-availabilityStatus": "Stable"
                }
            },
            "title": "BearerToken"
        },
        "ErrorPayload": {
            "type": "object",
            "properties": {
                "failures": {
                    "type": "array",
                    "description": "More details on the occurred error",
                    "items": {
                        "$ref": "#/definitions/Failure"
                    },
                    "x-availabilityStatus": "Stable"
                },
                "request": {
                    "description": "Error details",
                    "$ref": "#/definitions/RequestEcho",
                    "x-availabilityStatus": "Stable"
                }
            },
            "title": "ErrorPayload",
            "description": "Error response body"
        },
        "ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Payload",
                    "$ref": "#/definitions/ErrorPayload",
                    "x-availabilityStatus": "Stable"
                },
                "group_header": {
                    "description": "Standard format response header",
                    "$ref": "#/definitions/ResponseHeader",
                    "x-availabilityStatus": "Stable"
                }
            },
            "title": "ErrorResponse",
            "description": "Error response"
        },
        "Failure": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Failure code",
                    "x-availabilityStatus": "Stable"
                },
                "description": {
                    "type": "string",
                    "description": "Failure description",
                    "x-availabilityStatus": "Stable"
                },
                "path": {
                    "type": "string",
                    "description": "JSON path of the failing element if applicable",
                    "x-availabilityStatus": "Stable"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the validation error, e.g. NotNull",
                    "x-availabilityStatus": "Stable"
                }
            },
            "title": "Failure",
            "description": "Validation error"
        },
        "Pagination": {
            "type": "object",
            "properties": {
                "continuation_key": {
                    "type": "string",
                    "description": "Resource listing may return a continuationKey if there's more results available. Request may be retried with the continuationKey, but otherwise same parameters, in order to get more results.",
                    "x-availabilityStatus": "Stable"
                }
            },
            "title": "Pagination",
            "description": "Details of paginated response"
        },
        "RequestEcho": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "Original request url",
                    "x-availabilityStatus": "Stable"
                }
            },
            "title": "RequestEcho",
            "description": "Original request information"
        },
        "ResponseHeader": {
            "type": "object",
            "properties": {
                "creation_date_time": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Response creation time",
                    "x-availabilityStatus": "Stable"
                },
                "http_code": {
                    "type": "integer",
                    "format": "int32",
                    "example": 200,
                    "description": "HTTP code for response",
                    "x-availabilityStatus": "Stable"
                },
                "message_identification": {
                    "type": "string",
                    "description": "Original request id for correlation purposes",
                    "x-availabilityStatus": "Stable"
                },
                "message_pagination": {
                    "description": "Details of paginated response",
                    "$ref": "#/definitions/Pagination",
                    "x-availabilityStatus": "Stable"
                }
            },
            "title": "ResponseHeader",
            "description": "External response header"
        }
    }
}
