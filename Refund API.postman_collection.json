{
	"info": {
		"_postman_id": "f16cda71-4042-4565-8440-d9eaeff91c38",
		"name": "Payment Refund API - Sandbox",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30935734"
	},
	"item": [
		{
			"name": "Send refund payment request",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"payment_id\", jsonData.response.refund_payment.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Digest",
						"value": "{{Digest}}",
						"type": "text"
					},
					{
						"key": "Signature",
						"value": "{{Signature}}",
						"type": "text"
					},
					{
						"key": "Technical-user-id",
						"value": "51014839302",
						"type": "text"
					},
					{
						"key": "X-IBM-Client-Id",
						"value": "{{X-IBM-Client-ID}}",
						"type": "text"
					},
					{
						"key": "X-IBM-Client-Secret",
						"value": "{{X-IBM-Client-Secret}}",
						"type": "text"
					},
					{
						"key": "X-Nordea-Originating-Date",
						"value": "{{X-Nordea-Originating-Date}}",
						"type": "text"
					},
					{
						"key": "X-Nordea-Originating-Host",
						"value": "{{X-Nordea-Originating-Host}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"payment_archive_id\": \"202103152588CEP10005\",\r\n    \"payment_account\": \"FI9819513119469790\",\r\n    \"amount\": \"5647\",\r\n    \"original_payment_date\": \"2024-01-01\",\r\n    \"currency\": \"EUR\",\r\n    \"message\": \"Limit of 140 characters\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.nordeaopenbanking.com/corporate/payment-refunds/v1/refunds",
					"protocol": "https",
					"host": [
						"api",
						"nordeaopenbanking",
						"com"
					],
					"path": [
						"corporate",
						"payment-refunds",
						"v1",
						"refunds"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get refund payment status request",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Signature",
						"value": "{{Signature}}",
						"type": "text"
					},
					{
						"key": "Technical-user-id",
						"value": "51014839302",
						"type": "text"
					},
					{
						"key": "X-IBM-Client-Id",
						"value": "{{X-IBM-Client-ID}}",
						"type": "text"
					},
					{
						"key": "X-IBM-Client-Secret",
						"value": "{{X-IBM-Client-Secret}}",
						"type": "text"
					},
					{
						"key": "X-Nordea-Originating-Date",
						"value": "{{X-Nordea-Originating-Date}}",
						"type": "text"
					},
					{
						"key": "X-Nordea-Originating-Host",
						"value": "{{X-Nordea-Originating-Host}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.nordeaopenbanking.com/corporate/payment-refunds/v1/refunds/:id",
					"protocol": "https",
					"host": [
						"api",
						"nordeaopenbanking",
						"com"
					],
					"path": [
						"corporate",
						"payment-refunds",
						"v1",
						"refunds",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{payment_id}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Load Forge library ",
					"// !!!!!!!!!!!!!! Unsafe: it is better to download and compile forge lib from https://github.com/digitalbazaar/forge and put it to service managed by you instead of using ",
					"// https://raw.githubusercontent.com/loveiset/RSAForPostman/master/forge.js or just copy whole script to Postman Pre-Script section",
					"if (!pm.globals.has(\"forgeJS\")) {",
					"    pm.sendRequest(\"https://raw.githubusercontent.com/loveiset/RSAForPostman/master/forge.js\", (err, res) => {",
					"        if(err) {",
					"            console.log(err);",
					"        } else {",
					"            pm.globals.set(\"forgeJS\", res.text());",
					"        }",
					"    });",
					"}",
					"eval(postman.getGlobalVariable(\"forgeJS\"));",
					" ",
					"// Common",
					"function getHeaderValue(headerName) {",
					"    const headerValue = request.headers[headerName];",
					"    if (headerValue === undefined) {",
					"        throw new Error(`Required header: ${headerName} is not defined`);",
					"    }",
					"    return resolveVariables(headerValue);",
					"}",
					" ",
					"function resolveVariables(textWithPossibleVaraibles) {",
					"    return textWithPossibleVaraibles.replace(/{{(\\w*)}}/g, (str, key) => {",
					"        const value = environment[key];",
					"        return value === null ? \"\" : value;",
					"    });",
					"}",
					" ",
					"// Digest Calculation",
					"function resolveRequestBody() {",
					"    const contentType = getHeaderValue(\"content-type\");",
					"    if (contentType === \"application/x-www-form-urlencoded\") {",
					"        const data = Object.keys(request.data)",
					"            .sort((a, b) => {",
					"                if(a < b) { return -1; }",
					"                if(a > b) { return 1; }",
					"                return 0;",
					"            })",
					"            .map(key => key + \"=\" + request.data[key])",
					"            .join('&');",
					"        return resolveVariables(data);",
					"    } else if (Object.entries(request.data).length === 0 && request.data.constructor === Object) {",
					"        return \"\";",
					"    }",
					" ",
					"    return resolveVariables(request.data.toString());",
					"}",
					" ",
					"function calculateDigest() {",
					"    const requestData = resolveRequestBody();",
					"    console.log(`Request data: ${requestData}`);",
					" ",
					"    const sha256digest = CryptoJS.SHA256(requestData);",
					"    const base64sha256 = CryptoJS.enc.Base64.stringify(sha256digest);",
					"    const calculatedDigest = 'sha-256=' + base64sha256;",
					"    console.log(`Digest header: ${calculatedDigest}`);",
					"    pm.environment.set(\"Digest\", calculatedDigest);",
					"    return calculatedDigest;",
					"}",
					" ",
					"// Signature Calculation",
					" ",
					"const sdk = require(\"postman-collection\");",
					"const moment = require(\"moment\")",
					" ",
					"const requestWithoutContentHeaders = \"(request-target) x-nordea-originating-host x-nordea-originating-date\";",
					"const requestWithContentHeaders = \"(request-target) x-nordea-originating-host x-nordea-originating-date content-type digest\";",
					" ",
					"function getSignatureBaseOnRequest() {",
					"    const url = new sdk.Url(resolveVariables(request.url));",
					"    const host = url.getHost().toLowerCase();",
					"    const path = url.getPathWithQuery();",
					"    const method = request.method.toLowerCase();",
					"    const date = moment().utc().format(\"ddd, DD MMM YYYY HH:mm:ss\") + \" GMT\";",
					" ",
					"    let headers = requestWithoutContentHeaders;",
					" ",
					"    let normalizedString =",
					"        `(request-target): ${method} ${path}\\n` +",
					"        `x-nordea-originating-host: ${host}\\n` +",
					"        `x-nordea-originating-date: ${date}`;",
					" ",
					"    if (method === \"post\" || method === \"put\" || method === \"patch\") {",
					"        const contentType = getHeaderValue(\"content-type\");",
					"        const digest = calculateDigest();",
					"        normalizedString += `\\ncontent-type: ${contentType}\\ndigest: ${digest}`",
					" ",
					"        headers = requestWithContentHeaders;",
					"    }",
					"    return {host, path, method, date, headers, normalizedString};",
					"}",
					" ",
					"function encryptSignature(normalizedSignatureString) {",
					"    const messageDigest = forge.md.sha256.create();",
					"    messageDigest.update(normalizedSignatureString, \"utf8\");",
					"    return forge.util.encode64(getPrivateKey().sign(messageDigest));",
					"}",
					" ",
					"function getPrivateKey() {",
					"    let eidasPrivateKey = pm.environment.get(\"eidasPrivateKey\");",
					" ",
					"    if (!eidasPrivateKey.includes('PRIVATE KEY')) {",
					"        eidasPrivateKey = \"-----BEGIN RSA PRIVATE KEY-----\\n\" + eidasPrivateKey + \"\\n\" + \"-----END RSA PRIVATE KEY-----\";",
					"    }",
					"    console.log(eidasPrivateKey);",
					"    return forge.pki.privateKeyFromPem(eidasPrivateKey);",
					"}",
					" ",
					"const clientId = getHeaderValue(\"x-ibm-client-id\")",
					"const signature = getSignatureBaseOnRequest();",
					"const encryptedSignature = encryptSignature(signature.normalizedString);",
					"const signatureHeader = `keyId=\"${clientId}\",algorithm=\"rsa-sha256\",headers=\"${signature.headers}\",signature=\"${encryptedSignature}\"`;",
					" ",
					"console.log(`Normalized signature string: ${signature.normalizedString}`);",
					"console.log(`Signature header: ${signatureHeader}`);",
					" ",
					"pm.environment.set(\"Signature\", signatureHeader);",
					"pm.environment.set(\"X-Nordea-Originating-Host\", signature.host);",
					"pm.environment.set(\"X-Nordea-Originating-Date\", signature.date);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
